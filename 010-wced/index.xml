<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>毎日コードを書く話 on Message Passing</title>
    <link>https://messagepassing.github.io/010-wced/</link>
    <description>Recent content in 毎日コードを書く話 on Message Passing</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://messagepassing.github.io/010-wced/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>不安とコード</title>
      <link>https://messagepassing.github.io/010-wced/05-morrita/</link>
      <pubDate>Sat, 13 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://messagepassing.github.io/010-wced/05-morrita/</guid>
      <description>皆の話を読んで、 自分の「仕事の成果を出すためにいつもコードを書く」論は現実というより願望なのだと気づいた。 仕事で成果を出したいならコードを書く以外にもやるべきことは色々あって、 そういうのはさぼらずやったほうが成果はでる。調査とか説得とか協議とか。ただやりたくない。
同じように「よく考える」みたいな曖昧で前の見えない時間の使い方にも不安を感じ、 コードという tangible な存在に頼ってしまう。 コードを頼りに考えを進められるからコードを書く・・・と言えればかっこいいけれど、 自分は必ずしもそういう類のコードを優先しているとは言えない。
一歩下がると、コードを書かずにいる不安が根にある。
会社員プログラマ、偉くなるとコードを書かなくなるのはよく知られた事実だけれど、 偉くない平社員でもあんまりコードを書かない人はいる。 それでも意味のある貢献はできる。組織がでかいと特に。 自分は厳密には会社員プログラマではなく会社員ソフトウェア・エンジニアで、 広義のソフトウェア・エンジニアリングはプログラミング以外にも割と色々ある。 自分が「雑用」と読んでいる仕事たちの裾野は広い。
一方で、コードを書かないでいるとプログラミングができなくなってしまう、 「雑用」の人になってしまうのではと気が気でない。 だからコードを書いて雑用だけでない自分を確かめたい。 向井さんがいう「マネージャの趣味的なコード書き」に通じるものがある。
以前はまじさんが難しいコードを家で書けばいいと言っていた。 これはコード全般にいえるのかもしれない。 コードを書きたい不満や書いていない不安は仕事の外で晴らしておき、仕事は成果にフォーカスする。
自分は残念ながらそこまでストイックでなく、家ではコードを書くのかわりに ブログを書いたりインターネットしたりしちゃってる。 家でもっとコード書くぞ！・・・と宣言するガッツはないけれど、 今日こうして不安の存在に気づけたのはよかった。</description>
    </item>
    
    <item>
      <title>毎日は書いてないが、言わんとする事は分かる</title>
      <link>https://messagepassing.github.io/010-wced/04-karino2/</link>
      <pubDate>Sat, 13 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://messagepassing.github.io/010-wced/04-karino2/</guid>
      <description>WCEDという物自体を今回初めて知ったし、 毎日コードを書く事は意識していなかったし、WCEDしてない。
自分の仕事でのコード書きはどんな感じか オリジナルのWCEDとmorritaさんの話は既に結構違う所なので、 仕事でどうなの？という事だと思うのだけれど、 自分は毎日は書いていないと思う。 そもそも毎日働いてはいないのもあるが（今は60%稼働の契約なので週休4日）、 稼働日も毎日はコードを書いてはいない。
今回の仕事は、大雑把には「今から作るプロダクトが業界でNo.1になるのに必要な機能を作ってくれ、何を作るかは好きに決めてくれ（意訳）」みたいな仕事だ。 何を作るかも自分で勝手に考える（相談はするが）し、割と綺麗に切れている大きめの機能をスクラッチから単独で数ヶ月かけて実装するものが多い。 チームが小さすぎてレビューを頼める相手が居ない事情もあり、 レビュー待ちとかミーティングとかはほぼゼロ。コードを書く以外の仕事は無い。
だいたい2週間くらい何かを調査し、3ヶ月〜半年くらい掛けて実装するみたいなのが多い。 調査期間の2週間くらいはほとんどコードを書いていなくて、 実装期間である三ヶ月〜半年の間はほぼ毎稼働日コードを書いていると思う。
ただ実装期間でもたまに一日以上調査が必要になる事もあって、 完全に毎日という訳では無く、たまに空く日はある。 でもこれはそんなに頻度は多く無いかな。数週間に一回とかのレベル。 これはmorritaさんの言う２つ目のパターンですね。jmukが言っているのも同じ感じに思う。
一日の稼働日のほぼすべてが調査とコーディングだけ。それ以外の時間はほぼ無い。 実際は一日中コード書くのは大変なので、午前中だけの日とか夜だけの日ともある。一週間ではだいたい3稼働日くらいの労働量という形態になっている。
だから毎日書いてはいないけれど、コードを書く量に関しては結構な量書けていて、コードとしてのアウトプットにはまぁまぁ満足している。
コードを書く事、前に一歩進む事 自分はmorritaさんのエントリを見て、Joelの射撃しつつ前進の話を思い出した。
メールとか経費精算とかミーティングとかで、コード書きになかなか取りかかれない。 そんななか毎日ちょっとでも、FogBUGZのカラースキームを改良することだけでも、 とにかくコードを書けていればOKだ・・・という話。
雑用と、パフォーマンス計測とかで時間を溶かすのとは違う気もするけれど、 なんとかコーディングの時間を捻出してそれにしがみつくのが大切な事なのでは？ というのは似た話に感じた。
もともとmorritaさんの言っているバグレポート解析とかコードレビューとか性能問題の分析というのは、 無駄な雑用という訳でも無いし、それ自体コードを書くより価値がある場合もある。 メールとかはだいたい無駄な気もするけれど、これだって必要と思っているから書いているはず。
でも、あとで振り返った時に、そうした活動があまり価値を生んでないように感じる事はあるんだよなぁ。 四半期を振り返って「あれ？これだけしかやってないのはどうなんだ？」というような。 そしてこの感覚はだいたい正しいとも思う。
コードを書くという選択 ソフトウェア開発の仕事でも、なるべくコードを書かないで済ますのが重要な仕事とか、 人の仕事を助けるような形でチーム全体のアウトプットを増やすのが重要な仕事とか、 いろんな形態がある。 コードを書くというのがいつも前に一歩進んでいる事で、それ以外がいつも無駄という訳では無い。
一方でコードを書く事で前進するような仕事はあるし、 「自分の今の仕事はそういう物でありたい」という希望の元に日々頑張ってコードを書く選択をすることもあると思う。 コードを書く事が一歩進む事であるというよりは、コードを書く事が一歩になるような仕事をするという。
自分は今は「コードを書く事が重要な仕事」を選んで受けている。 Individual Contributorとして、自分１人で書くコードでシニアとしての存在価値を示すのを最近の自分のテーマとしている。 仕事を選ぶ段階で「コードを書くという事が前進となっている仕事」を選択している。
結局我々はプログラムが好きなので、そういう選択をするのもまぁ当然ではあるよなぁ。
余談だけど、Individual Contributorって日本語ではなんて言うんですかね？
 morrita 射撃しつつ前進! そうかも。潜在意識で影響受けてそう。ジョエル世代というやつですねえ。
IC は自分は語弊があるのは承知で「平社員」と意訳することが多いかな。 Senior engineer だと「一人前の平社員」でそれより偉いと「できる平社員」。
  karino2 その分類だとたぶん「できる平社員」は結構ラダー高いICですよね。 めちゃくちゃ凄い人なのに言葉から漂うゆるふわ感（笑）</description>
    </item>
    
    <item>
      <title>毎日コードを書く理由</title>
      <link>https://messagepassing.github.io/010-wced/03-jmuk/</link>
      <pubDate>Wed, 10 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://messagepassing.github.io/010-wced/03-jmuk/</guid>
      <description>わたしはコードはわりと毎日書いている気がする……仕事では（趣味ではとても毎日は続かない）。といってもべつにgithubを使っているわけじゃないから草が生えるわけでもないし、そういう可視化を励みにしているというわけでもない（むかし、Chromiumコードベース全体のコミット数ランキングの社内ダッシュボードみたいのがあったことがあり、そこではそこそこ上位になっていて嬉しかったということはある）。ただ、どっちかというと自分の趣味嗜好のようなものとして、結果的にそうなっているという方が近い気がする。
もちろんコードを書く＝コミットをマージするというわけでもない（コードレビューなどのプロセスもるから）し、実際には本当に文字通り毎日というわけでもないだろう。ずーっとデバッグだけして何も成果がないときもあるし。でも実際に自分のコードレビュー履歴 を見てみると、まあまあそれなりにちょこちょこ書いていることが多い気がする。
ただ、仕事においてWCEDがいいかというと、現実的になって振り返るとデメリットのほうが大きいとは思う。細かい雑用みたいな小さな仕事に手を付けがちで、大きな問題を放置してしまいがちになってしまう。もりたさんの書くような、雑用がみるみるうちに片付いてやることがなくなってしまった、なんていうのはある意味成功事例かな、という気がする。無限に雑用が湧いてくるようなタイプのプロジェクトの場合、いつまでたっても細かい雑用しかせず、結果的に大した成果もないし出世もしない、みたいな話になりがちなのがいちばん危なくて、バランスを取る必要がある。
もちろんプロジェクトのフェーズによっては、難しい問題について考えたり、考えをドキュメントにまとめたり、他人のドキュメントやコードをレビューすることで忙しくなってしまう、ということはある。それでも自分の場合は、他人にレビューコメントを送って返事がくるまでの間に細かいバグを直したり、みたいにしてコードを書く時間を設けていることが多いかなと思う。そのままバグの分析に熱中してしまってメインの大きな仕事がおろそかになってしまうことも、まああるのだけど……。
やっぱり個人的にはWCEDは自分の精神の安定性とか、満足度とか、楽しさとかのためにあるように思っている。小さな成果が積み重なっていく感じがあって満足度も高いし、ちょっとした達成感もある。ただやりたいのでやっているというぐらい。いってみれば趣味というようなものなので、そちらに行きすぎないようにうまくバランスをとらないといけないのだろう。あんまり自分がバランス取れている気もしないので、そこは大きな問題な気もする。
少し話はそれるけど、10年ほど前の上司の上司がdirectorに昇進したとき（directorっていうのは日本語だとなんなんだろう、部長、ぐらい？）、俺はdirectorになるけどコードは書くぜ！といった意気込みを示したことがあった。それからしばらくしたある日、私がちょっと遅い時間に仕事をしているとそのdirectorが私の席までやってきて、真剣な顔でちょっといいか、ききたいことがあるんだが……と言う。これはやばい話かもしれない、と戦々恐々としつつdirectorの席までついていくと、画面にeclipseが開いてあって「この関数をテストしたいんだけどさ……」というのであった（その部分は自分は詳しくなかったのであんまりきちんと答えられなかった。残念）。このdirectorは、その後更に出世したしさすがに今ではコードは書く時間もないだろうけれど、当時でもめちゃくちゃ忙しかったであろう合間をぬってでも細かい雑用みたいなコード書いていたのだった。これは偉いというかすごいと思った。が、今思えばあれはなんというか、この話と似たような趣味的な活動だったのかもしれない。every dayでないにせよ、定期的にコードを書いていたいというような。まあそれでいてその人は出世できてるんだからやっぱりすごい偉いという話でもあるんだが。
 shinh それた話題に喰いつきますが、マネージャーが全力でコード書いてるのはアンチパターンな気がするけど、十分に偉いリーダーがコード書いてると心を鷲掴みにされるもんがありますよね。実際 report のやってることを解像度良く把握するのに有効な気もするし……   </description>
    </item>
    
    <item>
      <title>毎日を細切れにされるのはきつい</title>
      <link>https://messagepassing.github.io/010-wced/02-kzys/</link>
      <pubDate>Wed, 03 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://messagepassing.github.io/010-wced/02-kzys/</guid>
      <description>仕事に WCED は無理があったのか、それとも自分の仕事の仕方がよくないのか。 みんな仕事で毎日コードかいてんの？どうなの？
 Write Code Every Day してないなあ。毎週はなにか書いていると思うけれど、毎日といわれると怪しい。
仕事の外での Write Code Every Day は How the GitHub contribution graph is harmful (2016) という話があって、実際に GitHub からも連続日数表示が消えてからはや5年たつ2021年に目指すものではないと思うけれど、仕事でも毎営業日コードを書いてはいない。
理由は morrita さんと大体同じで、人にブロックされることとか、難しめの仕事とか。さらにいうと、後者には大抵「設計を文章にまとめて人々に相談してみる」すなわちミーティングの主催も含まれがちで、そうするとミーティングの日まで人にブロックされることになる。
毎日コードを書けないのはいいけど・・・ というわけで、毎日コードを書けないのは、個人的には許容している。コードを書く前に立ち止まって考えたほうがいいことは、立ち止まって考えたらいいじゃない。一方で、毎日をミーティングで埋められて、かつその合間が30分とか1時間なのはつらい。
そういうのが散見されるときは、自分のカレンダーを自分の予定で事前に埋めるというのを実践していて、適当な時間に2時間程度の長さの予定を入れている。ミーティングを入れるソフトウェアは一般にダブルブッキングを避けてくれるものなので、ここで難しい仕事とか、やらないといけない仕事にちょっと進捗を出す。2時間程度の連続した時間がとれない日には、人々の仕事をがんばって手伝ったということにして、自分の仕事が進まなくてもあまり気にしない。
メールは夕方4時まで読みません、というのは会社員にはちょっと厳しいと思うけれど、オフィスにちょっと早めに来て、仕事の最初の1時間くらいはメールを読まない、というのは一時期やっていた。最近やっていないのは、なんでだっけ? また再開してもよさそう。メールも Slack も、他人の TODO が高速に飛んでくるメディアという側面があるので、あんまり貼り付いているのは良くない。
毎日コードが書けないのが許容できて、ミーティングで時間を細切れにされるのを許容できないのは、多分自分の仕事の多くは「考えること」で、難しいことを1時間程度で考えることはできないと思っているからだと思う。訓練を積んだら出来るようになるのかもしれないけど、あまりに大企業最適化すぎるので出来るようになりたいかというと微妙な気持ち。</description>
    </item>
    
    <item>
      <title>Write Code Every Day At Work</title>
      <link>https://messagepassing.github.io/010-wced/01-morrita/</link>
      <pubDate>Tue, 02 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://messagepassing.github.io/010-wced/01-morrita/</guid>
      <description>去年一年の仕事を振り返っていて、いまいちコードを書いていないことに気づいてしまった。
プログラマの下っ端がコードを書かずに何をしているかというと、 バグのたらい回し、バグレポートの解析、コードレビュー、メールとか報告とかの自然言語書き、バグのたらい回しとか。 下っ端には下っ端の雑用があり、特に性能問題の分析は無限に時間を溶かしがち。去年はだいぶ溶かしてしまった。
その反省からもうちょっとコードを書こうと、去年のおわりくらいから午前中は雑用をすべてすっぽかしコードを書くことにしてみた。 いわゆる Write Code Every Day (WCED)。
やってみると腰が重くて放置していた積み残しの仕事たちがあれよあれよと片付き、コードも書けて満足度も高く、 なぜこれをやっていなかったのか（答: 色々な圧力があったから）不思議なくらい捗った。のだけれど、ここ一週間くらい行き詰まってきた。 というのも、即座にコードの書ける仕事が手元からなくなってしまった。
１つ目のパターンは、誰かを待つ必要がある仕事。わかりやすいのだとコードレビューとか。 あとは人のコードベースに踏み込んでなんかやるために方針を相談するとか。 話がつくまでそのあとの作業ができない。 まあこれは自分にとって付き合いの長い問題なので、並列化とかでそれなりに乗り切れる。
２つ目のパターンは、真面目に考えないといけないむずかし目の仕事。 うーんと考える。既存のコードやインフラのドキュメントを読む。方針とかを書き出して関係者の反応を見る・・・など、 コードを書くためのコード以外の準備がそれなりに必要なもの。
個人的にはこの２つ目に手強さを感じている。 自分は考え事や調査に時間を溶かしがち。しかも考え事をするとコードを書く勢いが止まってしまう不安がある。 気がつくとまた雑用の引力に引き込まれてしまうんじゃないか。
そんな気の重さに負け、つい優先度の低い細かいリファクタリングやバグ修正を優先してしまったりする。 でもそういうことをしていると大事な問題が前に進まない。
世の中の WCED 体験談にも、似たような意見を見かけることがある。 WCED はもともと課外活動のためのアイデアなので、それなら WCED を目的にして手段を調整すればいいといえばいい。 課外活動の WCED はそうやって問題を回避している。たとえば coding quiz や教材を優先する、みたいな。 でも自分は仕事をはかどらせるのが目的なので、同じ方法は使えない。
仕事に WCED は無理があったのか、それとも自分の仕事の仕方がよくないのか。 みんな仕事で毎日コードかいてんの？どうなの？</description>
    </item>
    
  </channel>
</rss>
